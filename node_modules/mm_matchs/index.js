/**
 * @fileOverview mm_matchs 字符串匹配原型函数
 * @author <a href="http://qww.elins.cn">邱文武</a>
 * @version 1.0
 */
require('mm_expand');

/**
 * 用作拓展的函数
 * @class
 */
class Matchs {
	/**
	 * 匹配拓展
	 */
	constructor(config) {
		this.dict = {
			"{日期时间}": "datetime",
			"{日期}": "date",
			"{时间}": "time",
			"{年月日}": "year_month_day",
			"{月日}": "month_day",
			"{时分秒}": "hour_minute_second",
			"{时分}": "hour_minute",
			"{时态}": "tense",
			"{星期}": "week",
			"{周期}": "cycle",

			"{国家}": "country",
			"{省份}": "province",
			"{城市}": "city",
			"{管辖区}": "district",
			"{方位}": "bearing",
			"{性别}": "sex",
			"{年龄}": "age",
			"{不对}": "wrong",
			"{职位}": "job",

			"{网址}": "url",
			"{邮箱}": "email",
			"{账号}": "account",
			"{强账号}": "account_advanced",
			"{密码}": "password",
			"{强密码}": "password_advanced",

			"{身份证号}": "idcard",
			"{车牌号}": "car_number",
			"{邮政编码}": "post_code",
			"{疑问}": "question",
			"{颜色}": "color",
			"{中文}": "chinese",
			"{英文}": "english",
			"{中英文}": "chinese_english",
			"{中文或英文}": "chinese_or_english",
			"{手机号码}": "phone",
			"{电话号码}": "tel",
			"{数字}": "digits",
			"{数值}": "number",
			"{浮点数}": "float",


			"{IP}": "ip",
			"{QQ}": "qq",
			"{a标签}": "a_tag",
			"{img标签}": "img_tag",
			"{html标签}": "html_tag",
			"{标签之间}": "html_between",
			"{链接}": "link",
		};
	}
}

/**
 * 改变格式
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @param {Regex} rx 正则表达式
 * @param {String} key 替换名
 * @return {String} 返回新的格式
 */
function change(str, format, rx, key) {
	var t = str;
	var f = format;
	var mh = str.match(rx);
	if (mh) {
		var len = mh.length;
		for (var i = 0; i < len; i++) {
			var k = mh[i];
			if (t.indexOf(k) !== -1) {
				t = t.replace(k, '');
				f = f.replace(key, k);
			}
		}
	}
	return f;
};
Matchs.prototype.change = change;

/**
 * 改变格式(可变形)
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @param {Regex} rx 正则表达式
 * @param {String} key 替换名
 * @param {Function} func 回调函数(用于匹配项变形)
 * @return {String} 返回新的格式
 */
function change_func(str, format, rx, key, func) {
	var t = str;
	var f = format;
	var mh = str.match(rx);
	if (mh) {
		var len = mh.length;
		for (var i = 0; i < len; i++) {
			var k = mh[i];
			if (t.indexOf(k) !== -1) {
				t = t.replace(k, '');
				if (func) {
					f = f.replace(key, func(k));
				} else {
					f = f.replace(key, k);
				}
			}
		}
	}
	return f;
};
Matchs.prototype.change_func = change_func;

/**
 * 改变格式(通过数组)
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @param {Array} arr 数组
 * @param {String} key 替换名
 * @return {String} 返回新的格式
 */
function change_arr(str, format, arr, key) {
	var t = str;
	var f = format;
	for (var i = 0; i < arr.length; i++) {
		var k = arr[i];
		if (t.indexOf(k) !== -1) {
			t = t.replace(k, '');
			f = f.replace(key, k);
		}
	}
	return f;
};
Matchs.prototype.change_arr = change_arr;

(function() {
	/**
	 * 匹配{时态}
	 * @param {String} str 匹配的字符串
	 * @param {String} format 匹配格式
	 * @return {String} 返回新的格式
	 */
	Matchs.prototype.tense = function(str, format) {
		var rx = /(今|明|昨|本|前|后)(年|月|日|时|号|天)/;
		return change(str, format, rx, "{时态}");
	};

	/**
	 * 匹配{方位}
	 * @param {String} str 匹配的字符串
	 * @param {String} format 匹配格式
	 * @return {String} 返回新的格式
	 */
	Matchs.prototype.bearing = function(str, format) {
		var rx = /(东南|东北|西南|西北)(部|方|地区)?|(东|西|南|北|中)(部|方|地区)/;
		return change(str, format, rx, "{方位}");
	};

	/**
	 * 匹配{省份}
	 * @param {String} str 匹配的字符串
	 * @param {String} format 匹配格式
	 * @return {String} 返回新的格式
	 */
	Matchs.prototype.province = function(str, format) {
		var rx =
			/(北京市|天津市|河北|山西|内蒙古自治区|辽宁|吉林|黑龙江|上海市|江苏|浙江|安徽|福建|江西|山东|河南|湖北|湖南|广东|广西壮族自治区|海南|重庆市|四川|贵州|云南|西藏自治区|陕西|甘肃|青海|宁夏回族自治区|新疆维吾尔自治区|台湾|香港|澳门)(省|特别行政区)?/;
		return change(str, format, rx, "{省份}");
	};

	/**
	 * 匹配{城市}
	 * @param {String} str 匹配的字符串
	 * @param {String} format 匹配格式
	 * @return {String} 返回新的格式
	 */
	Matchs.prototype.city = function(str, format) {
		var rx =
			/(石家庄|唐山|秦皇岛|邯郸|邢台|保定|张家口|承德|沧州|廊坊|衡水|太原|大同|阳泉|长治|晋城|朔州|晋中|运城|忻州|临汾|吕梁|呼和浩特|包头|乌海|赤峰|通辽|鄂尔多斯|呼伦贝尔|巴彦淖尔|乌兰察布|兴安盟|锡林郭勒盟|阿拉善盟|沈阳|大连|鞍山|抚顺|本溪|丹东|锦州|营口|阜新|辽阳|盘锦|铁岭|朝阳|葫芦岛|长春|吉林|四平|辽源|通化|白山|松原|白城|延边朝鲜族|哈尔滨|齐齐哈尔|鸡西|鹤岗|双鸭山|大庆|伊春|佳木斯|七台河|牡丹江|黑河|绥化|大兴安岭|南京|无锡|徐州|常州|苏州|南通|连云港|淮安|盐城|扬州|镇江|泰州|宿迁|杭州|宁波|温州|嘉兴|湖州|绍兴|金华|衢州|舟山|台州|丽水|合肥|芜湖|蚌埠|淮南|马鞍山|淮北|铜陵|安庆|黄山|滁州|阜阳|宿州|巢湖|六安|亳州|池州|宣城|福州|厦门|莆田|三明|泉州|漳州|南平|龙岩|宁德|南昌|景德镇|萍乡|九江|新余|鹰潭|赣州|吉安|宜春|抚州|上饶|济南|青岛|淄博|枣庄|东营|烟台|潍坊|济宁|泰安|威海|日照|莱芜|临沂|德州|聊城|滨州|荷泽|郑州|开封|洛阳|平顶山|安阳|鹤壁|新乡|焦作|濮阳|许昌|漯河|三门峡|南阳|商丘|信阳|周口|驻马店|武汉|黄石|十堰|宜昌|襄樊|鄂州|荆门|孝感|荆州|黄冈|咸宁|随州|恩施土家族苗族|省直辖行政单位|长沙|株洲|湘潭|衡阳|邵阳|岳阳|常德|张家界|益阳|郴州|永州|怀化|娄底|湘西土家族苗族|广州|韶关|深圳|珠海|汕头|佛山|江门|湛江|茂名|肇庆|惠州|梅州|汕尾|河源|阳江|清远|东莞|中山|潮州|揭阳|云浮|南宁|柳州|桂林|梧州|北海|防城港|钦州|贵港|玉林|百色|贺州|河池|来宾|崇左|海口|三亚)(市|地区|自治州)?/;
		return change(str, format, rx, "{城市}");
	};

	/**
	 * 匹配{管辖区}
	 * @param {String} str 匹配的字符串
	 * @param {String} format 匹配格式
	 * @return {String} 返回新的格式
	 */
	Matchs.prototype.district = function(str, format) {
		var rx =
			/(东城|西城|崇文|宣武|朝阳|丰台|石景山|海淀|门头沟|房山|通州|顺义|昌平|大兴|怀柔|平谷|密云|延庆|和平|河东|河西|南开|河北|红桥|塘沽|汉沽|大港|东丽|西青|津南|北辰|武清|宝坻|宁河|静海|蓟　|辖|长安|桥东|桥西|新华|井陉矿|裕华|井陉|正定|栾城|行唐|灵寿|高邑|深泽|赞皇|无极|平山|元氏|赵　|辛集|藁城|晋州|新乐|鹿泉|路南|路北|古冶|开平|丰南|丰润|滦　|滦南|乐亭|迁西|玉田|唐海|遵化|迁安|海港|山海关|北戴河|青龙满族自治|昌黎|抚宁|卢龙|邯山|丛台|复兴|峰峰矿|邯郸|临漳|成安|大名|涉　|磁　|肥乡|永年|邱　|鸡泽|广平|馆陶|魏　|曲周|武安|邢台|临城|内丘|柏乡|隆尧|任　|南和|宁晋|巨鹿|新河|广宗|平乡|威　|清河|临西|南宫|沙河|新|北|南|满城|清苑|涞水|阜平|徐水|定兴|唐　|高阳|容城|涞源|望都|安新|易　|曲阳|蠡　|顺平|博野|雄　|涿州|定州|安国|高碑店|宣化|下花园|张北|康保|沽源|尚义|蔚　|阳原|怀安|万全|怀来|涿鹿|赤城|崇礼|双桥|双滦|鹰手营子矿|承德|兴隆|平泉|滦平|隆化|丰宁满族自治|宽城满族自治|围场满族蒙古族自治|运河|沧　|青　|东光|海兴|盐山|肃宁|南皮|吴桥|献　|孟村回族自治|泊头|任丘|黄骅|河间|安次|广阳|固安|永清|香河|大城|文安|大厂回族自治|霸州|三河|桃城|枣强|武邑|武强|饶阳|安平|故城|景　|阜城|冀州|深州|小店|迎泽|杏花岭|尖草坪|万柏林|晋源|清徐|阳曲|娄烦|古交|城　|矿　|南郊|新荣|阳高|天镇|广灵|灵丘|浑源|左云|大同|郊　|平定|盂　|长治|襄垣|屯留|平顺|黎城|壶关|长子|武乡|沁　|沁源|潞城|沁水|阳城|陵川|泽州|高平|朔城|平鲁|山阴|应　|右玉|怀仁|榆次|榆社|左权|和顺|昔阳|寿阳|太谷|祁　|平遥|灵石|介休|盐湖|临猗|万荣|闻喜|稷山|新绛|绛　|垣曲|夏　|平陆|芮城|永济|河津|忻府|定襄|五台|代　|繁峙|宁武|静乐|神池|五寨|岢岚|河曲|保德|偏关|原平|尧都|曲沃|翼城|襄汾|洪洞|古　|安泽|浮山|吉　|乡宁|大宁|隰　|永和|蒲　|汾西|侯马|霍州|离石|文水|交城|兴　|临　|柳林|石楼|岚　|方山|中阳|交口|孝义|汾阳|新城|回民|玉泉|赛罕|土默特左旗|托克托|和林格尔|清水河|武川|东河|昆都仑|青山|石拐|白云矿|九原|土默特右旗|固阳|达尔罕茂明安联合旗|海勃湾|海南|乌达|红山|元宝山|松山|阿鲁科尔沁旗|巴林左旗|巴林右旗|林西|克什克腾旗|翁牛特旗|喀喇沁旗|宁城|敖汉旗|科尔沁|科尔沁左翼中旗|科尔沁左翼后旗|开鲁|库伦旗|奈曼旗|扎鲁特旗|霍林郭勒|东胜|达拉特旗|准格尔旗|鄂托克前旗|鄂托克旗|杭锦旗|乌审旗|伊金霍洛旗|海拉尔|阿荣旗|莫力达瓦达斡尔族自治旗|鄂伦春自治旗|鄂温克族自治旗|陈巴尔虎旗|新巴尔虎左旗|新巴尔虎右旗|满洲里|牙克石|扎兰屯|额尔古纳|根河|临河|五原|磴口|乌拉特前旗|乌拉特中旗|乌拉特后旗|杭锦后旗|集宁|卓资|化德|商都|兴和|凉城|察哈尔右翼前旗|察哈尔右翼中旗|察哈尔右翼后旗|四子王旗|丰镇|乌兰浩特|阿尔山|科尔沁右翼前旗|科尔沁右翼中旗|扎赉特旗|突泉|二连浩特|锡林浩特|阿巴嘎旗|苏尼特左旗|苏尼特右旗|东乌珠穆沁旗|西乌珠穆沁旗|太仆寺旗|镶黄旗|正镶白旗|正蓝旗|多伦|阿拉善左旗|阿拉善右旗|额济纳旗|沈河|大东|皇姑|铁西|苏家屯|东陵|新城子|于洪|辽中|康平|法库|新民|中山|西岗|沙河口|甘井子|旅顺口|金州|长海|瓦房店|普兰店|庄河|铁东|立山|千山|台安|岫岩满族自治|海城|新抚|东洲|望花|顺城|抚顺|新宾满族自治|清原满族自治|溪湖|明山|南芬|本溪满族自治|桓仁满族自治|元宝|振兴|振安|宽甸满族自治|东港|凤城|古塔|凌河|太和|黑山|义　|凌海|北宁|站前|西|鲅鱼圈|老边|盖州|大石桥|海州|新邱|太平|清河门|细河|阜新蒙古族自治|彰武|白塔|文圣|宏伟|弓长岭|太子河|辽阳|灯塔|双台子|兴隆台|大洼|盘山|银州|铁岭|西丰|昌图|调兵山|开原|双塔|龙城|建平|喀喇沁左翼蒙古族自治|北票|凌源|连山|龙港|南票|绥中|建昌|兴城|南关|宽城|二道|绿园|双阳|农安|九台|榆树|德惠|昌邑|龙潭|船营|丰满|永吉|蛟河|桦甸|舒兰|磐石|梨树|伊通满族自治|公主岭|双辽|龙山|西安|东丰|东辽|东昌|二道江|通化|辉南|柳河|梅河口|集安|八道江|抚松|靖宇|长白朝鲜族自治|江源|临江|宁江|前郭尔罗斯蒙古族自治|长岭|乾安|扶余|洮北|镇赉|通榆|洮南|大安|延吉|图们|敦化|珲春|龙井|和龙|汪清|安图|道里|南岗|道外|香坊|动力|平房|松北|呼兰|依兰|方正|宾　|巴彦|木兰|通河|延寿|阿城|双城|尚志|五常|龙沙|建华|铁锋|昂昂溪|富拉尔基|碾子山|梅里斯达斡尔族|龙江|依安|泰来|甘南|富裕|克山|克东|拜泉|讷河|鸡冠|恒山|滴道|城子河|麻山|鸡东|虎林|密山|向阳|工农|南山|兴安|东山|兴山|萝北|绥滨|尖山|岭东|四方台|宝山|集贤|友谊|宝清|饶河|萨尔图|龙凤|让胡路|红岗|肇州|肇源|林甸|杜尔伯特蒙古族自治|伊春|南岔|友好|西林|翠峦|新青|美溪|金山屯|五营|乌马河|汤旺河|带岭|乌伊岭|红星|上甘岭|嘉荫|铁力|永红|前进|东风|桦南|桦川|汤原|抚远|同江|富锦|新兴|桃山|茄子河|勃利|东安|阳明|爱民|东宁|林口|绥芬河|海林|宁安|穆棱|爱辉|嫩江|逊克|孙吴|北安|五大连池|北林|望奎|兰西|青冈|庆安|明水|绥棱|安达|肇东|海伦|呼玛|塔河|漠河|黄浦|卢湾|徐汇|长宁|静安|普陀|闸北|虹口|杨浦|闵行|嘉定|浦东新|金山|松江|青浦|南汇|奉贤|崇明|玄武|白下|秦淮|建邺|鼓楼|下关|浦口|栖霞|雨花台|江宁|六合|溧水|高淳|崇安|南长|北塘|锡山|惠山|滨湖|江阴|宜兴|云龙|九里|贾汪|泉山|丰　|沛　|铜山|睢宁|新沂|邳州|天宁|钟楼|戚墅堰|新北|武进|溧阳|金坛|沧浪|平江|金阊|虎丘|吴中|相城|常熟|张家港|昆山|吴江|太仓|崇川|港闸|海安|如东|启东|如皋|海门|连云|新浦|赣榆|东海|灌云|灌南|楚州|淮阴|清浦|涟水|洪泽|盱眙|金湖|亭湖|盐都|响水|滨海|阜宁|射阳|建湖|东台|大丰|广陵|邗江|宝应|仪征|高邮|江都|京口|润州|丹徒|丹阳|扬中|句容|海陵|高港|兴化|靖江|泰兴|姜堰|宿城|宿豫|沭阳|泗阳|泗洪|上城|下城|江干|拱墅|西湖|滨江|萧山|余杭|桐庐|淳安|建德|富阳|临安|海曙|江东|江北|北仑|镇海|鄞州|象山|宁海|余姚|慈溪|奉化|鹿城|龙湾|瓯海|洞头|永嘉|平阳|苍南|文成|泰顺|瑞安|乐清|秀城|秀洲|嘉善|海盐|海宁|平湖|桐乡|吴兴|南浔|德清|长兴|安吉|越城|绍兴|新昌|诸暨|上虞|嵊州|婺城|金东|武义|浦江|磐安|兰溪|义乌|东阳|永康|柯城|衢江|常山|开化|龙游|江山|定海|岱山|嵊泗|椒江|黄岩|路桥|玉环|三门|天台|仙居|温岭|临海|莲都|青田|缙云|遂昌|松阳|云和|庆元|景宁畲族自治|龙泉|瑶海|庐阳|蜀山|包河|长丰|肥东|肥西|镜湖|马塘|新芜|鸠江|芜湖|繁昌|南陵|龙子湖|蚌山|禹会|淮上|怀远|五河|固镇|大通|田家庵|谢家集|八公山|潘集|凤台|金家庄|花山|雨山|当涂|杜集|相山|烈山|濉溪|铜官山|狮子山|铜陵|迎江|大观|怀宁|枞阳|潜山|太湖|宿松|望江|岳西|桐城|屯溪|黄山|徽州|歙　|休宁|黟　|祁门|琅琊|南谯|来安|全椒|定远|凤阳|天长|明光|颍州|颍东|颍泉|临泉|阜南|颍上|界首|墉桥|砀山|萧　|灵璧|泗　|居巢|庐江|无为|含山|和　|金安|裕安|寿　|霍邱|舒城|金寨|霍山|谯城|涡阳|蒙城|利辛|贵池|东至|石台|青阳|宣州|郎溪|广德|泾　|绩溪|旌德|宁国|台江|仓山|马尾|晋安|闽侯|连江|罗源|闽清|永泰|平潭|福清|长乐|思明|海沧|湖里|集美|同安|翔安|城厢|涵江|荔城|秀屿|仙游|梅列|三元|明溪|清流|宁化|大田|尤溪|沙　|将乐|泰宁|建宁|永安|鲤城|丰泽|洛江|泉港|惠安|安溪|永春|德化|金门|石狮|晋江|南安|芗城|龙文|云霄|漳浦|诏安|长泰|南靖|平和|华安|龙海|延平|顺昌|浦城|光泽|松溪|政和|邵武|武夷山|建瓯|建阳|新罗|长汀|永定|上杭|武平|连城|漳平|蕉城|霞浦|古田|屏南|寿宁|周宁|柘荣|福安|福鼎|东湖|青云谱|湾里|青山湖|南昌|新建|安义|进贤|昌江|珠山|浮梁|乐平|安源|湘东|莲花|上栗|芦溪|庐山|浔阳|九江|武宁|修水|永修|德安|星子|都昌|湖口|彭泽|瑞昌|渝水|分宜|月湖|余江|贵溪|章贡|赣　|信丰|大余|上犹|崇义|安远|龙南|定南|全南|宁都|于都|兴国|会昌|寻乌|石城|瑞金|南康|吉州|青原|吉安|吉水|峡江|新干|永丰|泰和|遂川|万安|安福|永新|井冈山|袁州|奉新|万载|上高|宜丰|靖安|铜鼓|丰城|樟树|高安|临川|南城|黎川|南丰|崇仁|乐安|宜黄|金溪|资溪|东乡|广昌|信州|上饶|广丰|玉山|铅山|横峰|弋阳|余干|鄱阳|万年|婺源|德兴|历下|中|槐荫|天桥|历城|长清|平阴|济阳|商河|章丘|四方|黄岛|崂山|李沧|城阳|胶州|即墨|平度|胶南|莱西|淄川|张店|博山|临淄|周村|桓台|高青|沂源|薛城|峄城|台儿庄|山亭|滕州|东营|河口|垦利|利津|广饶|芝罘|福山|牟平|莱山|长岛|龙口|莱阳|莱州|蓬莱|招远|海阳|潍城|寒亭|坊子|奎文|临朐|昌乐|青州|诸城|寿光|安丘|高密|任城|微山|鱼台|金乡|嘉祥|汶上|泗水|梁山|曲阜|兖州|邹城|泰山|岱岳|宁阳|东平|新泰|肥城|环翠|文登|荣成|乳山|岚山|五莲|莒　|莱城|钢城|兰山|罗庄|沂南|郯城|沂水|苍山|费　|平邑|莒南|蒙阴|临沭|德城|陵　|宁津|庆云|临邑|齐河|平原|夏津|武城|乐陵|禹城|东昌府|阳谷|莘　|茌平|东阿|冠　|高唐|临清|滨城|惠民|阳信|无棣|沾化|博兴|邹平|牡丹|曹　|单　|成武|巨野|郓城|鄄城|定陶|东明|中原|二七|管城回族|金水|上街|邙山|中牟|巩义|荥阳|新密|新郑|登封|龙亭|顺河回族|杞　|通许|尉氏|开封|兰考|老城|西工|廛河回族|涧西|吉利|洛龙|孟津|新安|栾川|嵩　|汝阳|宜阳|洛宁|伊川|偃师|卫东|石龙|湛河|宝丰|叶　|鲁山|郏　|舞钢|汝州|文峰|北关|殷都|龙安|安阳|汤阴|滑　|内黄|林州|鹤山|山城|淇滨|浚　|淇　|红旗|卫滨|凤泉|牧野|新乡|获嘉|原阳|延津|封丘|长垣|卫辉|辉|解放|中站|马村|山阳|修武|博爱|武陟|温　|济源|沁阳|孟州|华龙|清丰|南乐|范　|台前|濮阳|魏都|许昌|鄢陵|襄城|禹州|长葛|源汇|郾城|召陵|舞阳|临颍|湖滨|渑池|陕　|卢氏|义马|灵宝|宛城|卧龙|南召|方城|西峡|镇平|内乡|淅川|社旗|唐河|新野|桐柏|邓州|梁园|睢阳|民权|睢　|宁陵|柘城|虞城|夏邑|永城|师河|平桥|罗山|光山|新　|商城|固始|潢川|淮滨|息　|川汇|扶沟|西华|商水|沈丘|郸城|淮阳|太康|鹿邑|项城|驿城|西平|上蔡|平舆|正阳|确山|泌阳|汝南|遂平|新蔡|江岸|江汉|乔口|汉阳|武昌|洪山|东西湖|汉南|蔡甸|江夏|黄陂|新洲|黄石港|西塞山|下陆|铁山|阳新|大冶|茅箭|张湾|郧　|郧西|竹山|竹溪|房　|丹江口|西陵|伍家岗|点军|猇亭|夷陵|远安|秭归|长阳土家族自治|五峰土家族自治|宜都|当阳|枝江|樊城|襄阳|南漳|谷城|保康|老河口|枣阳|宜城|梁子湖|华容|鄂城|东宝|掇刀|京山|沙洋|钟祥|孝南|孝昌|大悟|云梦|应城|安陆|汉川|沙|荆州|公安|监利|江陵|石首|洪湖|松滋|黄州|团风|红安|罗田|英山|浠水|蕲春|黄梅|麻城|武穴|咸安|嘉鱼|通城|崇阳|通山|赤壁|曾都|广水|恩施|利川|建始|巴东|宣恩|咸丰|来凤|鹤峰|仙桃|潜江|天门|神农架林|芙蓉|天心|岳麓|开福|雨花|长沙|望城|宁乡|浏阳|荷塘|芦淞|石峰|天元|株洲|攸　|茶陵|炎陵|醴陵|雨湖|岳塘|湘潭|湘乡|韶山|珠晖|雁峰|石鼓|蒸湘|南岳|衡阳|衡南|衡山|衡东|祁东|耒阳|常宁|双清|大祥|北塔|邵东|新邵|邵阳|隆回|洞口|绥宁|新宁|城步苗族自治|武冈|岳阳楼|云溪|君山|岳阳|湘阴|汨罗|临湘|武陵|鼎城|安乡|汉寿|澧　|临澧|桃源|石门|津|武陵源|慈利|桑植|资阳|赫山|南　|桃江|安化|沅江|北湖|苏仙|桂阳|宜章|永兴|嘉禾|临武|汝城|桂东|安仁|资兴|芝山|冷水滩|祁阳|双牌|道　|江永|宁远|蓝山|新田|江华瑶族自治|鹤城|中方|沅陵|辰溪|溆浦|会同|麻阳苗族自治|新晃侗族自治|芷江侗族自治|靖州苗族侗族自治|通道侗族自治|洪江|娄星|双峰|新化|冷水江|涟源|吉首|泸溪|凤凰|花垣|保靖|古丈|永顺|荔湾|越秀|海珠|天河|芳村|白云|黄埔|番禺|花都|增城|从化|武江|浈江|曲江|始兴|仁化|翁源|乳源瑶族自治|新丰|乐昌|南雄|罗湖|福田|宝安|龙岗|盐田|香洲|斗门|金湾|龙湖|金平|濠江|潮阳|潮南|澄海|南澳|禅城|南海|顺德|三水|高明|蓬江|江海|新会|台山|恩平|赤坎|霞山|坡头|麻章|遂溪|徐闻|廉江|雷州|吴川|茂南|茂港|电白|高州|化州|信宜|端州|鼎湖|广宁|怀集|封开|德庆|高要|四会|惠城|惠阳|博罗|惠东|龙门|梅江|梅　|大埔|丰顺|五华|平远|蕉岭|兴宁|海丰|陆河|陆丰|源城|紫金|龙川|连平|东源|江城|阳西|阳东|阳春|清城|佛冈|阳山|连山壮族瑶族自治|连南瑶族自治|清新|英德|连州|湘桥|潮安|饶平|榕城|揭东|揭西|惠来|普宁|云城|郁南|云安|罗定|青秀|江南|西乡塘|良庆|邕宁|武鸣|隆安|马山|上林|宾阳|横　|城中|鱼峰|柳南|柳北|柳江|柳城|鹿寨|融安|融水苗族自治|三江侗族自治|秀峰|叠彩|七星|雁山|阳朔|临桂|灵川|全州|永福|灌阳|龙胜各族自治|资源|平乐|荔蒲|恭城瑶族自治|万秀|蝶山|长洲|苍梧|藤　|蒙山|岑溪|银海|铁山港|合浦|港口|防城|上思|东兴|钦南|钦北|灵山|浦北|港北|港南|覃塘|平南|桂平|玉州|容　|陆川|博白|兴业|北流|右江|田阳|田东|平果|德保|靖西|那坡|凌云|乐业|田林|隆林各族自治|八步|昭平|钟山|富川瑶族自治|金城江|南丹|天峨|凤山|东兰|罗城仫佬族自治|环江毛南族自治|巴马瑶族自治|都安瑶族自治|大化瑶族自治|宜州|兴宾|忻城|象州|武宣|金秀瑶族自治|合山|江洲|扶绥|宁明|龙州|大新|天等|凭祥|秀英|龙华|琼山|美兰|五指山|琼海|儋州|文昌|万宁|东方|定安|屯昌|澄迈|临高|白沙黎族自治|昌江黎族自治|乐东黎族自治|陵水黎族自治|保亭黎族苗族自治|琼中黎族苗族自治|西沙群岛|南沙群岛|中沙群岛的岛礁及其海域|万州|涪陵|渝中|大渡口|沙坪坝|九龙坡|南岸|北碚|万盛|渝北|巴南|黔江|长寿|綦江|潼南|铜梁|大足|荣昌|璧山|梁平|城口|丰都|垫江|武隆|忠　|开　|云阳|奉节|巫山|巫溪|石柱土家族自治|秀山土家族苗族自治|酉阳土家族苗族自治|彭水苗族土家族自治|江津|合川|永川|南川|锦江|青羊|金牛|武侯|成华|龙泉驿|青白江|新都|温江|金堂|双流|郫　|大邑|蒲江|新津|都江堰|彭州|邛崃|崇州|自流井|贡井|沿滩|荣　|富顺|东　|西　|仁和|米易|盐边|江阳|纳溪|龙马潭|泸　|合江|叙永|古蔺|旌阳|中江|罗江|广汉|什邡|绵竹|涪城|游仙|三台|盐亭|安　|梓潼|北川羌族自治|平武|江油|元坝|朝天|旺苍|青川|剑阁|苍溪|船山|安居|蓬溪|射洪|大英|威远|资中|隆昌|沙湾|五通桥|金口河|犍为|井研|夹江|沐川|峨边彝族自治|马边彝族自治|峨眉山|顺庆|高坪|嘉陵|南部|营山|蓬安|仪陇|西充|阆中|东坡|仁寿|彭山|洪雅|丹棱|青神|翠屏|宜宾|南溪|江安|高　|珙　|筠连|兴文|屏山|广安|岳池|武胜|邻水|华莹|通川|达　|宣汉|开江|大竹|渠　|万源|雨城|名山|荥经|汉源|石棉|天全|芦山|宝兴|巴州|通江|南江|平昌|雁江|安岳|乐至|简阳|汶川|理　|茂　|松潘|九寨沟|金川|小金|黑水|马尔康|壤塘|阿坝|若尔盖|红原|康定|泸定|丹巴|九龙|雅江|道孚|炉霍|甘孜|新龙|德格|白玉|石渠|色达|理塘|巴塘|乡城|稻城|得荣|西昌|木里藏族自治|盐源|德昌|会理|会东|宁南|普格|布拖|金阳|昭觉|喜德|冕宁|越西|甘洛|美姑|雷波|南明|云岩|花溪|乌当|小河|开阳|息烽|修文|清镇|六枝特|水城|盘　|红花岗|汇川|遵义|桐梓|绥阳|正安|道真仡佬族苗族自治|务川仡佬族苗族自治|凤冈|湄潭|余庆|习水|赤水|仁怀|西秀|平坝|普定|镇宁布依族苗族自治|关岭布依族苗族自治|紫云苗族布依族自治|铜仁|江口|玉屏侗族自治|石阡|思南|印江土家族苗族自治|德江|沿河土家族自治|松桃苗族自治|万山特|兴义|兴仁|普安|晴隆|贞丰|望谟|册亨|安龙|毕节|大方|黔西|金沙|织金|纳雍|威宁彝族回族苗族自治|赫章|凯里|黄平|施秉|三穗|镇远|岑巩|天柱|锦屏|剑河|黎平|榕江|从江|雷山|麻江|丹寨|都匀|福泉|荔波|贵定|瓮安|独山|平塘|罗甸|长顺|龙里|惠水|三都水族自治|盘龙|官渡|西山|东川|呈贡|晋宁|富民|宜良|石林彝族自治|嵩明|禄劝彝族苗族自治|寻甸回族彝族自治|安宁|麒麟|马龙|陆良|师宗|罗平|富源|会泽|沾益|宣威|红塔|江川|澄江|通海|华宁|易门|峨山彝族自治|新平彝族傣族自治|元江哈尼族彝族傣族自治|隆阳|施甸|腾冲|龙陵|昌宁|昭阳|鲁甸|巧家|盐津|大关|永善|绥江|镇雄|彝良|威信|水富|古城|玉龙纳西族自治|永胜|华坪|宁蒗彝族自治|翠云|普洱哈尼族彝族自治|墨江哈尼族自治|景东彝族自治|景谷傣族彝族自治|镇沅彝族哈尼族拉祜族自治|江城哈尼族彝族自治|孟连傣族拉祜族佤族自治|澜沧拉祜族自治|西盟佤族自治|临翔|凤庆|云　|永德|镇康|双江拉祜族佤族布朗族傣族自治|耿马傣族佤族自治|沧源佤族自治|楚雄|双柏|牟定|南华|姚安|大姚|永仁|元谋|武定|禄丰|个旧|开远|蒙自|屏边苗族自治|建水|石屏|弥勒|泸西|元阳|红河|金平苗族瑶族傣族自治|绿春|河口瑶族自治|文山|砚山|西畴|麻栗坡|马关|丘北|广南|富宁|景洪|勐海|勐腊|大理|漾濞彝族自治|祥云|宾川|弥渡|南涧彝族自治|巍山彝族回族自治|永平|洱源|剑川|鹤庆|瑞丽|潞西|梁河|盈江|陇川|泸水|福贡|贡山独龙族怒族自治|兰坪白族普米族自治|香格里拉|德钦|维西傈僳族自治|城关|林周|当雄|尼木|曲水|堆龙德庆|达孜|墨竹工卡|昌都|江达|贡觉|类乌齐|丁青|察雅|八宿|左贡|芒康|洛隆|边坝|乃东|扎囊|贡嘎|桑日|琼结|曲松|措美|洛扎|加查|隆子|错那|浪卡子|日喀则|南木林|江孜|定日|萨迦|拉孜|昂仁|谢通门|白朗|仁布|康马|定结|仲巴|亚东|吉隆|聂拉木|萨嘎|岗巴|那曲|嘉黎|比如|聂荣|安多|申扎|索　|班戈|巴青|尼玛|普兰|札达|噶尔|日土|革吉|改则|措勤|林芝|工布江达|米林|墨脱|波密|察隅|朗　|碑林|莲湖|灞桥|未央|雁塔|阎良|临潼|蓝田|周至|户　|高陵|王益|印台|耀州|宜君|渭滨|金台|陈仓|凤翔|岐山|扶风|眉　|陇　|千阳|麟游|凤　|太白|秦都|杨凌|渭城|三原|泾阳|乾　|礼泉|永寿|彬　|长武|旬邑|淳化|武功|兴平|临渭|华　|潼关|大荔|合阳|澄城|蒲城|白水|富平|韩城|华阴|宝塔|延长|延川|子长|安塞|志丹|吴旗|甘泉|富　|洛川|宜川|黄龙|黄陵|汉台|南郑|城固|洋　|西乡|勉　|宁强|略阳|镇巴|留坝|佛坪|榆阳|神木|府谷|横山|靖边|定边|绥德|米脂|佳　|吴堡|清涧|子洲|汉滨|汉阴|石泉|宁陕|紫阳|岚皋|平利|镇坪|旬阳|白河|商州|洛南|丹凤|商南|镇安|柞水|七里河|西固|红古|永登|皋兰|榆中|永昌|白银|平川|靖远|会宁|景泰|秦城|北道|清水|秦安|甘谷|武山|张家川回族自治|凉州|民勤|古浪|天祝藏族自治|甘州|肃南裕固族自治|民乐|临泽|高台|山丹|崆峒|泾川|灵台|崇信|华亭|庄浪|静宁|肃州|金塔|安西|肃北蒙古族自治|阿克塞哈萨克族自治|玉门|敦煌|西峰|庆城|环　|华池|合水|正宁|宁　|镇原|安定|通渭|陇西|渭源|临洮|漳　|岷　|武都|成　|文　|宕昌|康　|西和|礼　|徽　|两当|临夏|康乐|永靖|广河|和政|东乡族自治|积石山保安族东乡族撒拉族自治|合作|临潭|卓尼|舟曲|迭部|玛曲|碌曲|夏河|城东|城西|城北|大通回族土族自治|湟中|湟源|平安|民和回族土族自治|乐都|互助土族自治|化隆回族自治|循化撒拉族自治|门源回族自治|祁连|海晏|刚察|同仁|尖扎|泽库|河南蒙古族自治|共和|同德|贵德|兴海|贵南|玛沁|班玛|甘德|达日|久治|玛多|玉树|杂多|称多|治多|囊谦|曲麻莱|格尔木|德令哈|乌兰|都兰|天峻|兴庆|西夏|金凤|永宁|贺兰|灵武|大武口|惠农|平罗|利通|盐池|同心|青铜峡|原州|西吉|隆德|泾源|彭阳|沙坡头|中宁|海原|天山|沙依巴克|水磨沟|头屯河|达坂城|乌鲁木齐|独山子|克拉玛依|白碱滩|乌尔禾|吐鲁番|鄯善|托克逊|哈密|巴里坤哈萨克自治|伊吾|昌吉|阜康|米泉|呼图壁|玛纳斯|奇台|吉木萨尔|木垒哈萨克自治|博乐|精河|温泉|库尔勒|轮台|尉犁|若羌|且末|焉耆回族自治|和静|和硕|博湖|阿克苏|温宿|库车|沙雅|新和|拜城|乌什|阿瓦提|柯坪|阿图什|阿克陶|阿合奇|乌恰|喀什|疏附|疏勒|英吉沙|泽普|莎车|叶城|麦盖提|岳普湖|伽师|巴楚|塔什库尔干塔吉克自治|和田|墨玉|皮山|洛浦|策勒|于田|民丰|伊宁|奎屯|察布查尔锡伯自治|霍城|巩留|新源|昭苏|特克斯|尼勒克|塔城|乌苏|额敏|托里|裕民|和布克赛尔蒙古自治|阿勒泰|布尔津|富蕴|福海|哈巴河|青河|吉木乃|石河子|阿拉尔|图木舒克|五家渠)(县|区|市)/
		return change(str, format, rx, "{管辖区}");
	};

	/**
	 * 匹配{车牌号}
	 * @param {String} str 匹配的字符串
	 * @param {String} format 匹配格式
	 * @return {String} 返回新的格式
	 */
	Matchs.prototype.car_number = function(str, format) {
		var rx = /[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}/
		return change(str, format, rx, "{车牌号}");
	};
})();


/**
 * 匹配{日期}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.date = function(str, format) {
	var rx =
		/(\d{4}(\-|\/|\.)(0[1-9]|1[012]|[1-9])(\-|\/|\.)([12][0-9]|0[1-9]|3[01]|[1-9]))|(([一二三四五六七八九]+年)?[一二三四五六七八九十]+月([一二三四五六七八九十]+(日|号))?)|((\d{4}年)?(0?[1-9]|1[012]|[1-9])月([12][0-9]|0?[1-9]|3[01]|[1-9])(日|号))/;
	return change(str, format, rx, '{日期}');
};

/**
 * 匹配{日期时间}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.datetime = function(str, format) {
	var rx =
		/((\d{4}(\-|\/|\.)(0[1-9]|1[012]|[1-9])(\-|\/|\.)([12][0-9]|0[1-9]|3[01]|[1-9]))|(([一二三四五六七八九]+年)?[一二三四五六七八九十]+月([一二三四五六七八九十]+(日|号))?)|((\d{4}年)?(0?[1-9]|1[012]|[1-9])月([12][0-9]|0?[1-9]|3[01]|[1-9])(日|号))) ?((([01][0-9]|2[0-3]):([0-4][0-9]|5[0-9])(:([0-4][0-9]|5[0-9]))?)|(([01][0-9]|2[0-3])点([0-4][0-9]|5[0-9])分(([0-4][0-9]|5[0-9])秒)?)|([一二三四五六七八九十]+点[一二三四五六七八九十]+分([一二三四五六七八九十]+秒)?))/;
	return change(str, format, rx, '{日期时间}');
};


/**
 * 匹配{年月日}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.year_month_day = function(str, format) {
	var rx =
		/(\d{4}(\-|\/|\.)(0[1-9]|1[012]|[1-9])(\-|\/|\.)([12][0-9]|0[1-9]|3[01]|[1-9]))|([一二三四五六七八九]+年[一二三四五六七八九十]+月[一二三四五六七八九十]+(日|号))|(\d{4}年(0?[1-9]|1[012]|[1-9])月([12][0-9]|0?[1-9]|3[01]|[1-9])(日|号))/;
	return change(str, format, rx, '{年月日}');
};

/**
 * 匹配{月日}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.month_day = function(str, format) {
	var rx =
		/((0[1-9]|1[012]|[1-9])(\-|\/|\.)([12][0-9]|0[1-9]|3[01]|[1-9]))|([一二三四五六七八九十]+月[一二三四五六七八九十]+(日|号))|((0?[1-9]|1[012]|[1-9])月([12][0-9]|0?[1-9]|3[01]|[1-9])(日|号))/;
	return change(str, format, rx, '{月日}');
};

/**
 * 匹配{时间}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.time = function(str, format) {
	var rx =
		/(([01][0-9]|2[0-3]):([0-4][0-9]|5[0-9])(:([0-4][0-9]|5[0-9]))?)|(([01][0-9]|2[0-3])点([0-4][0-9]|5[0-9])分(([0-4][0-9]|5[0-9])秒)?)|([一二三四五六七八九十]+点[一二三四五六七八九十]+分([一二三四五六七八九十]+秒)?)/;
	return change(str, format, rx, '{时间}');
};

/**
 * 匹配{星期}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.week = function(str, format) {
	var rx = /星期(一|二|三|四|五|六|(日|天))/;
	return change(str, format, rx, '{星期}');
};


/**
 * 匹配{周期}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.cycle = function(str, format) {
	var rx = /(过去|现在起?)?([0-9]+|[一二三四五六七八九十]+|几|数)((到|-|至|个)([0-9]+|[一二三四五六七八九十]+)?)?(号|日|天|周|月|年|天|小?时)(之?前|之?内|左右|之?后)/;
	return change(str, format, rx, '{周期}');
};


/**
 * 匹配{国家}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.country = function(str, format) {
	var arr = ["中国", "蒙古", "朝鲜", "韩国", "日本", "菲律宾", "越南", "老挝", "柬埔寨", "缅甸", "泰国", "马来西亚", "文莱", "新加坡", "印度尼西亚", " 东帝汶",
		"尼泊尔", "不丹", "孟加拉国", "印度", "巴基斯坦", "斯里兰卡", "马尔代夫", "哈萨克斯坦", "吉尔吉斯斯坦", "塔吉克斯坦", "乌兹别克斯坦", "土库曼斯坦", "阿富汗", "伊拉克",
		"伊朗", "叙利亚", "约旦", "黎巴嫩", "以色列", "巴勒斯坦", "沙特阿拉伯", "巴林", "卡塔尔", "科威特", "阿拉伯联合酋长国", "阿联酋", "阿曼", "也门", "格鲁吉亚", "亚美尼亚",
		"阿塞拜疆", "土耳其", "塞浦路斯", "芬兰", "瑞典", "挪威", "冰岛", "丹麦 法罗群岛", "爱沙尼亚", "拉脱维亚", "立陶宛", "白俄罗斯", "俄罗斯", "乌克兰", "摩尔多瓦", "波兰",
		"捷克", "斯洛伐克", "匈牙利", "德国", "奥地利", "瑞士", "列支敦士登", "英国", "爱尔兰", "荷兰", "比利时", "卢森堡", "法国", "摩纳哥", "罗马尼亚", "保加利亚",
		"塞尔维亚", "黑山", "马其顿", "阿尔巴尼亚", "希腊", "斯洛文尼亚", "克罗地亚", "波斯尼亚", "墨塞哥维那", "意大利", "梵蒂冈", "圣马力诺", "马耳他", "西班牙", "葡萄牙",
		"安道尔", "埃及", "利比亚", "苏丹", "突尼斯", "阿尔及利亚", "摩洛哥", "亚速尔群岛", "马德拉群岛", "埃塞俄比亚", "厄立特里亚", "索马里", "吉布提", "肯尼亚", "坦桑尼亚",
		"乌干达", "卢旺达", "布隆迪", "塞舌尔", "乍得", "中非", "喀麦隆", "赤道几内亚", "加蓬", "刚果共和国", "刚果", "刚果民主共和国", "圣多美及普林西比", "毛里塔尼亚", "西撒哈拉",
		"塞内加尔", "冈比亚", "马里", "布基纳法索", "几内亚", "几内亚比绍", "佛得角", "塞拉利昂", "利比里亚", "科特迪瓦", "加纳", "多哥", "贝宁", "尼日尔", "加那利群岛",
		"赞比亚", "安哥拉", "津巴布韦", "马拉维", "莫桑比克", "博茨瓦纳", "纳米比亚", "南非", "斯威士兰", "莱索托", "马达加斯加", "科摩罗", "毛里求斯", "留尼旺", "圣赫勒拿",
		"澳大利亚", "新西兰", "巴布亚新几内亚", "所罗门群岛", "瓦努阿图", "密克罗尼西亚", "马绍尔群岛", "帕劳", "瑙鲁", "基里巴斯", "图瓦卢", "萨摩亚", "斐济群岛", "汤加",
		"库克群岛", "关岛", "新喀里多尼亚", "法属波利尼西亚", "皮特凯恩岛", "瓦利斯与富图纳", "纽埃", "托克劳", "美属萨摩亚", "北马里亚纳", "加拿大", "美国", "墨西哥", "格陵兰",
		"危地马拉", "伯利兹", "萨尔瓦多", "洪都拉斯", "尼加拉瓜", "哥斯达黎加", "巴拿马", "巴哈马", "古巴", "牙买加", "海地", "多米尼加共和国", "安提瓜和巴布达", "圣基茨和尼维斯",
		"多米尼克", "圣卢西亚", "圣文森特和格林纳丁斯", "格林纳达", "巴巴多斯", "特立尼达和多巴哥", "波多黎各", "英属维尔京群岛", "美属维尔京群岛", "安圭拉", "蒙特塞拉特", "瓜德罗普",
		"马提尼克", "荷属安的列斯", "阿鲁巴", "特克斯和凯科斯群岛", "开曼群岛", "百慕大", "哥伦比亚", "委内瑞拉", "圭亚那", "法属圭亚那", "苏里南", "厄瓜多尔", "秘鲁", "玻利维亚",
		"智利", "阿根廷", "乌拉圭", "巴拉圭"
	]
	return change_arr(str, format, arr, '{国家}');
}

/**
 * 匹配{职位}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.job = function(str, format) {
	var rx =
		/(开发|测试|厨|推广|促销|设计|摄影|服务|体验|管理|访问|翻译|策划|维修|安检|配送|送餐|试玩|程序|(文案)?编辑|美(容|发))?(工程|模特|经纪|司机|主持|客服|顾问|实习|(礼|司)仪|演|专|小|代|店|家?教)?(兼职|学徒|C[EFITMO]O|生|人|员|嫂|姐|练|工|总?(监|(经|助)?理)|主(持|编|管)|师长?)/
	return change(str, format, rx, '{职位}');
};

/**
 * 匹配{时分秒}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.hour_minute_second = function(str, format) {
	var rx =
		/(([01][0-9]|2[0-3]):([0-4][0-9]|5[0-9]):([0-4][0-9]|5[0-9]))|(([01][0-9]|2[0-3])点([0-4][0-9]|5[0-9])分([0-4][0-9]|5[0-9])秒)|([一二三四五六七八九十]+点[一二三四五六七八九十]+分[一二三四五六七八九十]+秒)/;
	return change(str, format, rx, '{时分秒}');
};

/**
 * 匹配{时分}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.hour_minute = function(str, format) {
	var rx =
		/(([01][0-9]|2[0-3]):([0-4][0-9]|5[0-9]))|(([01][0-9]|2[0-3])点([0-4][0-9]|5[0-9])分)|([一二三四五六七八九十]+点[一二三四五六七八九十]+分)/;
	return change(str, format, rx, '{时分}');
};

/**
 * 匹配{账号}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.account = function(str, format) {
	var rx = /[a-z0-9A-Z_]{5,15}/;
	return change(str, format, rx, '{账号}');
};

/**
 * 匹配{强账号}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.account_advanced = function(str, format) {
	var rx = /[a-zA-Z][a-z0-9A-Z_]{4,14}/;
	return change(str, format, rx, '{强账号}');
};

/**
 * 匹配{密码}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.password = function(str, format) {
	var rx = /[a-z0-9A-Z]{5,17}/;
	return change(str, format, rx, '{密码}');
};

/**
 * 匹配{强密码}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.password_advanced = function(str, format) {
	var rx = /[a-zA-Z][a-zA-Z0-9_!@#$%\^&*?]{8,16}/;
	return change(str, format, rx, '{强密码}');
};

/**
 * 匹配{邮箱}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.email = function(str, format) {
	var rx = /\w[-\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\.)+[A-Za-z]{2,14}/;
	return change(str, format, rx, '{邮箱}');
};

/**
 * 匹配{邮政编码}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.post_code = function(str, format) {
	var rx = /(0[1234567]|1[012356]|2[01234567]|3[0123456]|4[01234567]|5[1234567]|6[1234567]|7[012345]|8[013456])\d{4}/;
	return change(str, format, rx, '{邮政编码}');
};

/**
 * 匹配{网址}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.url = function(str, format) {
	var rx = /((https|http|ftp|rtsp|mms)?:\/\/)[a-zA-Z0-9/.%&#:?]+/;
	return change(str, format, rx, '{网址}');
};

/**
 * 匹配{手机号码}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.phone = function(str, format) {
	var rx = /0?(13|14|15|16|17|18|19)[0-9]{9}/;
	return change(str, format, rx, '{手机号码}');
};


/**
 * 匹配{电话号码}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.tel = function(str, format) {
	var rx = /[0-9-()（）]{7,18}/;
	return change(str, format, rx, '{电话号码}');
};


/**
 * 匹配{数字}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.digits = function(str, format) {
	var rx = /[0-9]+/;
	return change(str, format, rx, '{数字}');
};

/**
 * 匹配{QQ}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.qq = function(str, format) {
	var rx = /[1-9]([0-9]{5,11})/;
	return change(str, format, rx, '{QQ}');
};


/**
 * 匹配{数值}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.number = function(str, format) {
	var rx = /[1-9]+[0-9]*(\.[0-9]+|[0-9]*)|0\.[0-9]+|0/;
	return change(str, format, rx, '{数值}');
};


/**
 * 匹配{浮点数}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.float = function(str, format) {
	var rx = /-?([1-9]\d*.\d*|0.\d*[1-9]\d*)/;
	return change(str, format, rx, '{浮点数}');
};


/**
 * 匹配{英文}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.english = function(str, format) {
	var rx = /[a-zA-Z]+/;
	return change(str, format, rx, '{英文}');
};

/**
 * 匹配{身份证号}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.idcard = function(str, format) {
	var rx = /\d{6}[12]\d{3}(0?[1-9]|1[012]|[1-9])([12][0-9]|0?[1-9]|3[01]|[1-9])(\d{3}|\d)[\d|x]/;
	return change(str, format, rx, '{身份证号}');
};

/**
 * 匹配{中文}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.chinese = function(str, format) {
	var rx = /[\u4e00-\u9fa5]+/;
	return change(str, format, rx, '{中文}');
};

/**
 * 匹配{中英文}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.chinese_english = function(str, format) {
	var rx = /[a-zA-Z\u4e00-\u9fa5 ]+/;
	return change(str, format, rx, '{中英文}');
};

/**
 * 匹配{中文或英文}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.chinese_or_english = function(str, format) {
	var rx = /[a-zA-Z ]+|[\u4e00-\u9fa5]+/;
	return change(str, format, rx, '{中文或英文}');
};

/**
 * 匹配{IP}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.ip = function(str, format) {
	var rx =
		/(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)\.(25[0-5]|2[0-4]\d|[0-1]\d{2}|[1-9]?\d)/;
	return change(str, format, rx, '{IP}');
};


/**
 * 匹配{a标签}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.a_tag = function(str, format) {
	var rx = /<a([ ]+[a-zA-Z][a-zA-Z0-9]+="[ ]*[a-zA-Z0-9/.%&#:?]+[ ]*"[ ]*)*>[\s\S]*<\/a>/;
	return change(str, format, rx, '{a标签}');
};

/**
 * 匹配{img标签}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.img_tag = function(str, format) {
	var rx = /<img([ ]+[a-zA-Z][a-zA-Z0-9]+="[ ]*[a-zA-Z0-9/.%&#:?]+[ ]*"[ ]*)*\/>/;
	return change(str, format, rx, '{img标签}');
};

/**
 * 匹配{链接}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.link = function(str, format) {
	var rx = /href="[ ]*[a-zA-Z0-9/.%&#:?]+[ ]*"/;
	var f = change_func(str, format, rx, '{链接}', function(o) {
		return o.between('"', '"');
	});
	return f;
};

/**
 * 匹配{html标签}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.html_tag = function(str, format) {
	var rx =
		/<[a-zA-Z!][a-zA-Z\-_]*([ ]+[a-zA-Z][a-zA-Z0-9]+="[ ]*[a-zA-Z0-9/.%&#:?]+[ ]*"[ ]*)(\/>|[\s\S]*<\/[a-zA-Z!][a-zA-Z\-_]*>)/;
	return change(str, format, rx, '{html标签}');
};


/**
 * 匹配{疑问}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.question = function(str, format) {
	var rx = /(做|干|找|看|想|听见?|拿|摸|买|获|去)?得?到?了?((什么(程度)?|怎么样?)|何(时|处)?|哪里|多少|多大|没)了?[？?]?/;
	return change(str, format, rx, '{疑问}');
};


/**
 * 匹配{颜色}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.color = function(str, format) {
	var rx = /[\u4e00-\u9fa5]?(红|橙|黄|绿|青|蓝|紫)?(红|橙|黄|绿|青|蓝|紫)色?/;
	return change(str, format, rx, '{颜色}');
};


/**
 * 匹配{性别}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.sex = function(str, format) {
	var rx = /[男女][生|性]?/;
	return change(str, format, rx, '{性别}');
};

/**
 * 匹配{年龄}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.age = function(str, format) {
	var rx = /([1-9]?[0-9]+|[一二三四五六七八九十]+)岁?/;
	return change(str, format, rx, '{年龄}');
};

/**
 * 匹配{不对}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.wrong = function(str, format) {
	var rx = /不(对|正确)|错(了|的|误)|(有|出)(问题|错)/;
	return change(str, format, rx, '{不对}');
};


/**
 * 匹配{标签之间}
 * @param {String} str 匹配的字符串
 * @param {String} format 匹配格式
 * @return {String} 返回新的格式
 */
Matchs.prototype.html_between = function(str, format) {
	var rx =
		/<[a-zA-Z!][a-zA-Z\-_]*([ ]+[a-zA-Z][a-zA-Z0-9]+="[ ]*[a-zA-Z0-9/.%&#:?]+[ ]*"[ ]*)(\/>|[\s\S]*<\/[a-zA-Z!][a-zA-Z\-_]*>)/;
	var f = change_func(str, format, rx, '{标签之间}', function(o) {
		var mh = o.match('^<[a-zA-Z!][a-zA-Z\-_]*([ ]+[a-zA-Z][a-zA-Z0-9]+="[ ]*[a-zA-Z0-9/.%&#:?]+[ ]*"[ ]*)(\/>|>)');
		if (mh) {
			var left = mh[0];
			var mh = o.match("</[a-zA-Z!][a-zA-Z\-_]*>$");
			if (mh) {
				var right = mh[0];
				return o.substring(0, o.length - right.length).replace(left, '');
			}
		}
		return "";
	});
	return f;
};

/**
 * 获取匹配的内容
 * @param {String} str 要匹配的字符串
 * @param {String} format 用作匹配的字符串格式
 * @param {Array} arr 匹配的字符串格式片段(可以为空)
 * @return {String} 返回匹配的结果
 */
Matchs.prototype.get = function(str, format) {
	var arr = [];
	var ft = format.replace(/\{/g, '`{').replace(/\}/g, '}`');
	var ar = ft.split('`').map(function(o) {
		if (o.indexOf('{') !== -1) {
			arr.push(o);
		}
	});

	var fmt = format.replace(/\//g, '\\/').replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\*/g, '.*').replace(
		/\{[a-zA-Z\u4e00-\u9fa5_]+\}/g, '[\\s\\S]*');

	var txt = str;
	try {
		rx = eval('/' + fmt + '/');
		var mh = str.match(rx);
		if (mh) {
			txt = mh[0];
		}
	} catch (e) {
		//TODO handle the exception
	}


	var f = format;
	var len = arr.length;
	for (var i = 0; i < len; i++) {
		var key = arr[i];
		var func_name = this.dict[key];

		if (func_name) {
			var func = this[func_name];
			if (func) {
				f = func(txt, f);
			}
		}
	}
	return f;
};

/**
 * 匹配字符串
 * @param {String} format 用作匹配的字符串格式
 * @return {String} 匹配成功返回匹配的字符串，否则返回空
 */
String.prototype.matchs = function(format) {
	var rx;
	var ret = "";
	if (format.startWith('/')) {
		try {
			rx = eval(format);
		} catch (e) {
			// TODO handle the exception
		}
	} else {
		var f = format;
		if (format.indexOf('{') !== -1) {
			var matchs = new Matchs();
			f = matchs.get(this, format);
		}

		f = '/' + f.replace(/\//g, '\\/').replace(/\r/g, '\\r').replace(/\n/g, '\\n').replace(/\*/g, '.*') + '/';

		try {
			rx = eval(f);
		} catch (e) {
			//TODO handle the exception
		}
	}

	if (rx) {
		var str = this + "";
		var mh = str.match(rx);
		var te = "";
		if (mh) {
			ret = mh[0];
		}
	}
	return ret;
};

module.exports = Matchs;
